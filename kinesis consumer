AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for a Lambda consumer for a Kinesis Data Stream.
  The Lambda function processes records from the specified Kinesis stream and logs them.
  You can adjust the processing delay (via the PROCESSING_DELAY_SECONDS environment variable)
  to simulate slower or faster consumption, thereby affecting the GetRecords.Latency metric
  used in your auto-scaling solution.

Parameters:
  StreamName:
    Type: String
    Default: MyDataStream
    Description: "Name of the existing Kinesis Data Stream to consume from."

Resources:
  ###############################################
  # IAM Role for the Lambda Consumer Function
  ###############################################
  ConsumerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StreamName}-LambdaConsumerRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "KinesisConsumerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListShards
                Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${StreamName}"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  ###############################################
  # Lambda Consumer Function
  ###############################################
  ConsumerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StreamName}-LambdaConsumer"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ConsumerLambdaRole.Arn
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          STREAM_NAME: !Ref StreamName
          PROCESSING_DELAY_SECONDS: "5"   # Set delay (in seconds) to simulate slower consumption; set to "0" for fast consumption.
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import time

          logger = logging.getLogger("KinesisConsumer")
          logger.setLevel(logging.INFO)

          # Retrieve environment variables
          STREAM_NAME = os.environ.get("STREAM_NAME")
          PROCESSING_DELAY_SECONDS = int(os.environ.get("PROCESSING_DELAY_SECONDS", "0"))

          def lambda_handler(event, context):
              logger.info("Lambda consumer invoked with event: %s", json.dumps(event))
              if PROCESSING_DELAY_SECONDS > 0:
                  logger.info(f"Simulating slow consumption by delaying processing for {PROCESSING_DELAY_SECONDS} seconds.")
                  time.sleep(PROCESSING_DELAY_SECONDS)
              for record in event.get("Records", []):
                  # The data is base64-encoded; decode if needed.
                  record_data = record.get("kinesis", {}).get("data", "")
                  logger.info("Received record: " + record_data)
              return {
                  "statusCode": 200,
                  "body": json.dumps("Records processed")
              }

  ###############################################
  # Event Source Mapping for Kinesis stream
  ###############################################
  ConsumerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: True
      EventSourceArn: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${StreamName}"
      FunctionName: !GetAtt ConsumerLambdaFunction.Arn
      StartingPosition: LATEST

Outputs:
  LambdaConsumerFunctionName:
    Description: "Name of the Lambda consumer function for the Kinesis stream"
    Value: !Ref ConsumerLambdaFunction
  KinesisStreamName:
    Description: "Name of the Kinesis Data Stream"
    Value: !Ref StreamName
