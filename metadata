AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to deploy a Lambda function that retrieves metadata from AWS Config.
  The function queries for:
    - EC2 Instances (InstanceId, AccountNumber, AccountName, OSName, OSVersion, InstanceName)
    - Lambda Functions (LambdaName, AccountNumber, AccountName, Runtime, RuntimeSoftwareVersion)
    - Network Appliances (EC2 instances tagged with NetworkAppliance=true enriched with AMI details)
  The function logs each metadata object separately so that they can be viewed in CloudWatch Logs.

Parameters:
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: "Lambda function timeout in seconds."

Resources:
  ###############################################
  # IAM Role for Metadata Puller Lambda
  ###############################################
  MetadataPullerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "MetadataPullerLambdaRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MetadataPullerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - config:SelectResourceConfig
                Resource: "*"
              - Effect: Allow
                Action:
                  - organizations:DescribeAccount
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: "*"

  ###############################################
  # Metadata Puller Lambda Function
  ###############################################
  MetadataPullerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MetadataPullerLambda
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt MetadataPullerLambdaRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Cache for account names to avoid duplicate Organizations calls.
          account_name_cache = {}
          org_client = boto3.client('organizations')

          def get_account_name(account_id):
              """
              Retrieves the account name from AWS Organizations.
              Uses an in-memory cache to avoid redundant calls.
              """
              if account_id in account_name_cache:
                  return account_name_cache[account_id]
              try:
                  response = org_client.describe_account(AccountId=account_id)
                  account_name = response['Account']['Name']
                  account_name_cache[account_id] = account_name
                  return account_name
              except Exception as e:
                  logger.error(f"Error retrieving account name for {account_id}: {e}")
                  return account_id

          def get_all_results(config_client, query):
              """
              Helper to paginate through AWS Config advanced query results.
              """
              results = []
              next_token = None
              while True:
                  if next_token:
                      response = config_client.select_resource_config(Expression=query, NextToken=next_token)
                  else:
                      response = config_client.select_resource_config(Expression=query)
                  if 'Results' in response:
                      results.extend(response['Results'])
                  next_token = response.get('NextToken')
                  if not next_token:
                      break
              return results

          def get_ec2_metadata():
              """
              Retrieve EC2 instance metadata from AWS Config.
              Expected fields:
                - accountId, resourceId,
                - configuration.tags.Name,
                - configuration.osName, configuration.osVersion
              """
              config_client = boto3.client('config')
              query = (
                  "SELECT accountId, resourceId, configuration.tags.Name, configuration.osName, configuration.osVersion "
                  "WHERE resourceType = 'AWS::EC2::Instance'"
              )
              raw_results = get_all_results(config_client, query)
              ec2_metadata = []
              for item in raw_results:
                  try:
                      record = json.loads(item)
                      account_id = record.get('accountId')
                      instance_id = record.get('resourceId')
                      instance_name = record.get('configuration.tags.Name')
                      os_name = record.get('configuration.osName')
                      os_version = record.get('configuration.osVersion')
                      account_name = get_account_name(account_id)
                      ec2_metadata.append({
                          'InstanceId': instance_id,
                          'AccountNumber': account_id,
                          'AccountName': account_name,
                          'OSName': os_name,
                          'OSVersion': os_version,
                          'InstanceName': instance_name
                      })
                  except Exception as e:
                      logger.error(f"Error processing EC2 record: {item} Error: {e}")
              return ec2_metadata

          def get_lambda_metadata():
              """
              Retrieve Lambda function metadata from AWS Config.
              Expected fields:
                - accountId, resourceId,
                - configuration.functionName,
                - configuration.runtime,
                - configuration.runtimeSoftwareVersion
              """
              config_client = boto3.client('config')
              query = (
                  "SELECT accountId, resourceId, configuration.functionName, configuration.runtime, configuration.runtimeSoftwareVersion "
                  "WHERE resourceType = 'AWS::Lambda::Function'"
              )
              raw_results = get_all_results(config_client, query)
              lambda_metadata = []
              for item in raw_results:
                  try:
                      record = json.loads(item)
                      account_id = record.get('accountId')
                      lambda_name = record.get('configuration.functionName')
                      runtime = record.get('configuration.runtime')
                      runtime_sw_version = record.get('configuration.runtimeSoftwareVersion')
                      account_name = get_account_name(account_id)
                      lambda_metadata.append({
                          'LambdaName': lambda_name,
                          'AccountNumber': account_id,
                          'AccountName': account_name,
                          'Runtime': runtime,
                          'RuntimeSoftwareVersion': runtime_sw_version,
                          'ResourceId': record.get('resourceId')
                      })
                  except Exception as e:
                      logger.error(f"Error processing Lambda record: {item} Error: {e}")
              return lambda_metadata

          def get_network_appliances_metadata():
              """
              Retrieve metadata for network appliances.
              Here we assume network appliances are modeled as EC2 instances with a tag:
                  NetworkAppliance=true
              Expected fields:
                - accountId, resourceId,
                - configuration.imageId,
                - configuration.tags.Name
              Enriches the data with AMI details.
              """
              config_client = boto3.client('config')
              ec2_client = boto3.client('ec2')
              query = (
                  "SELECT accountId, resourceId, configuration.imageId, configuration.tags.Name "
                  "WHERE resourceType = 'AWS::EC2::Instance' AND configuration.tags.NetworkAppliance = 'true'"
              )
              raw_results = get_all_results(config_client, query)
              network_metadata = []
              for item in raw_results:
                  try:
                      record = json.loads(item)
                      account_id = record.get('accountId')
                      instance_name = record.get('configuration.tags.Name')
                      image_id = None
                      if 'configuration' in record and isinstance(record['configuration'], dict):
                          image_id = record['configuration'].get('imageId')
                      ami_description = None
                      ami_name = None
                      ami_location = None
                      if image_id:
                          try:
                              response = ec2_client.describe_images(ImageIds=[image_id])
                              images = response.get('Images', [])
                              if images:
                                  image_info = images[0]
                                  ami_description = image_info.get('Description')
                                  ami_name = image_info.get('Name')
                                  ami_location = image_info.get('ImageLocation')
                          except Exception as e:
                              logger.error(f"Error fetching AMI details for {image_id}: {e}")
                      account_name = get_account_name(account_id)
                      network_metadata.append({
                          'InstanceName': instance_name,
                          'AccountId': account_id,
                          'AccountName': account_name,
                          'AMIId': image_id,
                          'AMIDescription': ami_description,
                          'AMIName': ami_name,
                          'AMILocation': ami_location
                      })
                  except Exception as e:
                      logger.error(f"Error processing network appliance record: {item} Error: {e}")
              return network_metadata

          def lambda_handler(event, context):
              logger.info("Starting metadata retrieval from AWS Config.")
              
              ec2_data = get_ec2_metadata()
              logger.info("EC2 Metadata: %s", json.dumps(ec2_data, indent=2))
              
              lambda_data = get_lambda_metadata()
              logger.info("Lambda Metadata: %s", json.dumps(lambda_data, indent=2))
              
              network_data = get_network_appliances_metadata()
              logger.info("Network Appliances Metadata: %s", json.dumps(network_data, indent=2))
              
              result = {
                  'EC2_Metadata': ec2_data,
                  'Lambda_Metadata': lambda_data,
                  'NetworkAppliances_Metadata': network_data
              }
              
              logger.info("Metadata retrieval complete.")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(result, indent=2)
              }
      
Outputs:
  MetadataPullerLambdaARN:
    Description: "ARN of the metadata pulling Lambda function"
    Value: !GetAtt MetadataPullerLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-MetadataPullerLambdaARN"
